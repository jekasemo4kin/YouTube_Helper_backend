<?php
session_start();
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
require_once __DIR__ . '/vendor/autoload.php';


header('Content-Type: application/json'); 
header("Access-Control-Allow-Origin: " . $_ENV['FRONTEND_REDIRECT_URL_BASE']); // –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞. –†–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã - —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏. –ë–µ–∑ —ç—Ç–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±—Ä–∞—É–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±—ã –≤—Å–µ AJAX –∑–∞–ø—Ä–æ—Å—ã –æ—Ç —Ñ—Ä–æ–Ω—Ç–∞ –∫ –±—ç–∫—É 
header("Access-Control-Allow-Methods: POST, GET, OPTIONS"); // –†–∞–∑—Ä–µ—à–∞–µ–º –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
header("Access-Control-Allow-Headers: Content-Type, X-Requested-With, Authorization"); // –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
header("Access-Control-Allow-Credentials: true"); // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫—É–∫–æ–≤ (—Å–µ—Å—Å–∏–π), –≤–∞–∂–Ω–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é

// –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS-–∑–∞–ø—Ä–æ—Å–æ–≤ (CORS preflight requests)
// –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç OPTIONS-–∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª—å–Ω—ã–º POST-–∑–∞–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit(); // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ OPTIONS
}
$response = ['success' => false, 'message' => 'An unknown error occurred.']; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Client
$client = new Google_Client();
$client->setClientId($_ENV['GOOGLE_CLIENT_ID']);
$client->setClientSecret($_ENV['GOOGLE_CLIENT_SECRET']);

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP-–∫–ª–∏–µ–Ω—Ç–∞ Guzzle —Å CA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
$httpClient = new GuzzleHttp\Client([
    'verify' => true // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω CA
]);
$client->setHttpClient($httpClient);

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ (scopes)
// –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã —Å —Ç–µ–º–∏, —á—Ç–æ –≤—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
$client->addScope("https://www.googleapis.com/auth/youtube.force-ssl");
$client->addScope("https://www.googleapis.com/auth/userinfo.email");
$client->addScope("https://www.googleapis.com/auth/userinfo.profile");
$client->addScope("https://www.googleapis.com/auth/youtube.readonly"); // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Access Token.
 * –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Å –ø–æ–º–æ—â—å—é Refresh Token.
 * –ï—Å–ª–∏ Refresh Token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
 *
 * @param Google_Client $client –û–±—ä–µ–∫—Ç Google Client.
 * @return bool –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ Access Token –≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, false –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
 */
function ensureAccessTokenIsValid(Google_Client $client): bool
{
    if (!isset($_SESSION['google_access_token']) || empty($_SESSION['google_access_token'])) {
        error_log("DEBUG: ensureAccessTokenIsValid - No access token found in session.");
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false, App.php –æ—Ç–ø—Ä–∞–≤–∏—Ç 401
        return false;
    }

    $client->setAccessToken($_SESSION['google_access_token']);

    if ($client->isAccessTokenExpired()) { // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–µ–∫—É—â–µ–≥–æ Access Token. –ò—Å—Ç—ë–∫ —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ ?
        error_log("DEBUG: ensureAccessTokenIsValid - Access token expired. Attempting to refresh.");   // –î–ê
        if (isset($_SESSION['google_access_token']['refresh_token'])) { // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å–ª–∏ —Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω
            try {
                $client->fetchAccessTokenWithRefreshToken($_SESSION['google_access_token']['refresh_token']); // –æ–±–Ω–æ–≤–ª—è–µ–º Access Token —Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω–æ–º
                $_SESSION['google_access_token'] = $client->getAccessToken(); // –∑–∞–Ω–æ—Å–∏–º –∞–∫—Å–µ—Å —Ç–æ–∫–µ–Ω –≤ —Å–µ—Å—Å–∏—é, —à–æ–± –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–∑–∏ –¥–æ –Ω–µ–≥–æ –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –≥–¥–µ-–ª–∏–±–æ
                error_log("DEBUG: ensureAccessTokenIsValid - Access token successfully refreshed.");
                return true;
            } catch (Exception $e) {
                error_log("ERROR: ensureAccessTokenIsValid - Failed to refresh access token: " . $e->getMessage());
                unset($_SESSION['google_access_token']);
                return false; // –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∏—Ç 401
            }
        } else {
            error_log("DEBUG: ensureAccessTokenIsValid - Access token expired, but no refresh token found.");
            unset($_SESSION['google_access_token']);
            return false; // –ù–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞, A –æ—Ç–ø—Ä–∞–≤–∏—Ç 401
        }
    }
    error_log("DEBUG: ensureAccessTokenIsValid - Access token is valid.");
    return true; // Access Token –≤–∞–ª–∏–¥–µ–Ω
}

// –ü–æ–ø—ã—Ç–∫–∞ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Access Token
if (!ensureAccessTokenIsValid($client)) { // —Ç–æ–∫–µ–Ω –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π(—Å–∫–æ—Ä–µ–µ –∏, –∞ –Ω–µ –∏–ª–∏, —Ç–∫ –≤ if-–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Å–µ—Å 
// —Ç–æ–∫–µ–Ω–∞, –∞ –∑–Ω–∞—á–∏—Ç if –ø—É—Å—Ç–∏—Ç –¥–∞–ª—å—à–µ –¥–∞–∂–µ –ø—Ä–∏ —Å—Ç–∞—Ä–æ–º –∞–∫—Å–µ—Å —Ç–æ–∫–µ–Ω–µ, –Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω–µ) –∏–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω?
    $response['message'] = 'Authentication required. Please log in again.';
    http_response_code(401); // Unauthorized
    echo json_encode($response);
    session_write_close();
    exit();
}

// –¢–µ–ø–µ—Ä—å $client –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π Access Token
$youtubeService = new Google_Service_YouTube($client);
error_log("DEBUG: Client is ready for YouTube API calls.");

// –ß—Ç–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞ (–æ–∂–∏–¥–∞–µ–º JSON)
$input = json_decode(file_get_contents('php://input'), true); // file_get_contents —á–∏—Ç–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ php://input (—Ç–æ –µ—Å—Ç—å, –∏–∑ —Ç–µ–ª–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ HTTP-–∑–∞–ø—Ä–æ—Å–∞) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –∫–∞–∫ –æ–¥–Ω—É –±–æ–ª—å—à—É—é —Å—Ç—Ä–æ–∫—É.
// 1 –∞—Ä–≥ —Ñ—É–Ω–∫—Ü–∏–∏ json_decode - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–æ–ª—É—á–∏–ª–∏ –∏–∑ file_get_contents('php://input'), –≤—Ç–æ—Ä–æ–π –∞—Ä–≥ –≥–æ–≤–æ—Ä–∏—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç json –≤ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤.

if (!is_array($input)) { // –µ—Å–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤, —Ç–æ –ø—É—Å—Ç–∏—Ç –≤ —Ç–µ–ª–æ, –∞ –∑–Ω–∞—á–∏—Ç JSON –ø—Ä–∏—à–µ–¥—à–∏–π —Å —Ñ—Ä–æ–Ω—Ç–∞ –ø–æ–ª–æ–º–∞–Ω–Ω—ã–π
    $response['message'] = 'Invalid JSON input.';
    http_response_code(400); // Bad Request
    echo json_encode($response); // –ú–∞—Å—Å–∏–≤ $response (—Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ—à–∏–±–∫—É) –∫–æ–¥–∏—Ä—É–µ—Ç—Å—è –≤ JSON-—Å—Ç—Ä–æ–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
    session_write_close();
    exit();
}

$action = $input['action'] ?? null; // –ù–∞–ø—Ä–∏–º–µ—Ä, 'likeVideo'
$videoUrl = $input['videoUrl'] ?? null; // URL –≤–∏–¥–µ–æ
$videoId = $input['videoId'] ?? null; // –î–æ–±–∞–≤–ª—è–µ–º videoId –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è actions

if ($videoUrl) {// –ï—Å–ª–∏ videoUrl –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º videoId
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –≤–∏–¥–µ–æ –∏–∑ URL
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ YouTube URL, —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —à–æ—Ä—Ç—Å
    if (preg_match('/(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/', $videoUrl, $matches)) { // —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –ø–æ–∏—Å–∫ 
    // —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é. —Å–ø–µ—Ä–≤–∞ —Ä–µ–≥—É–ª—è—Ä–∫–∞, –∑–∞—Ç–µ–º —Å—Ç—Ä–æ–∫–∞ (–≥–¥–µ –∏—â–µ–º), –∑–∞—Ç–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π 
    // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –≤—Å–µ–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
    
        $videoId = $matches[1];
    } else {
        $response['message'] = 'Invalid YouTube video URL provided.';
        http_response_code(400);
        echo json_encode($response);
        session_write_close();
        exit();
    }
}


if (!$action) {
    $response['message'] = 'Action not specified.';
    http_response_code(400);
    echo json_encode($response);
    session_write_close();
    exit();
}

try {
    switch ($action) {
        case 'likeVideo':
            if (!$videoId) {
                $response['message'] = 'Video ID is missing for like operation.';
                http_response_code(400);
                break; // –í—ã—Ö–æ–¥ –∏–∑ switch, —á—Ç–æ–±—ã –¥–∞–ª–µ–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ echo json_encode($response);
            }

            // 1. –õ–∞–π–∫ –≤–∏–¥–µ–æ
            $youtubeService->videos->rate($videoId, 'like');
            $response['message'] = 'Video liked successfully.';

            // 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (—Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–∑ –ø—É–ª–∞)
            $commentsPool = [
                "–û—Ç–ª–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                "–û—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–ø–∞—Å–∏–±–æ!",
                "–°—É–ø–µ—Ä! –õ–∞–π–∫ –∏ –ø–æ–¥–ø–∏—Å–∫–∞!",
                "–ö–ª–∞—Å—Å–Ω—ã–π —Ä–æ–ª–∏–∫, –º–Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!",
                "–ü—Ä–æ—Å—Ç–æ –±–ª–µ—Å—Ç—è—â–µ! üëç",
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–∞–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!",
                "–£–∑–Ω–∞–ª –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ, –∫—Ä—É—Ç–æ!",
                "–ñ–¥—É –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ!"
            ];
            $randomComment = $commentsPool[array_rand($commentsPool)];

            $commentThread = new Google_Service_YouTube_CommentThread();
            $commentThreadSnippet = new Google_Service_YouTube_CommentThreadSnippet();
            $commentThreadSnippet->setVideoId($videoId);
            $topLevelComment = new Google_Service_YouTube_Comment();
            $topLevelCommentSnippet = new Google_Service_YouTube_CommentSnippet();
            $topLevelCommentSnippet->setTextOriginal($randomComment);
            $topLevelComment->setSnippet($topLevelCommentSnippet);
            $commentThreadSnippet->setTopLevelComment($topLevelComment);
            
            $commentThread->setSnippet($commentThreadSnippet);

            $commentResponse = $youtubeService->commentThreads->insert('snippet', $commentThread);

            $commentId = $commentResponse->getSnippet()->getTopLevelComment()->getId(); // –ü–æ–ª—É—á–∞–µ–º commentId
            $response['commentId'] = $commentId; // –î–æ–±–∞–≤–ª—è–µ–º ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –æ—Ç–≤–µ—Ç

            $response['commentText'] = $randomComment;
            $response['message'] .= ' Comment added successfully.';

            // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            $videoInfo = $youtubeService->videos->listVideos('snippet,contentDetails', ['id' => $videoId]);
            if (!empty($videoInfo['items'])) {
                $item = $videoInfo['items'][0];
                $response['success'] = true;
                $response['videoData'] = [
                    'id' => $videoId,
                    'title' => $item['snippet']['title'],
                    // –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–∏–Ω–∏–∞—Ç—é—Ä—É
                    'thumbnail' => $item['snippet']['thumbnails']['maxres']['url'] ??
                                   $item['snippet']['thumbnails']['standard']['url'] ??
                                   $item['snippet']['thumbnails']['high']['url'] ??
                                   $item['snippet']['thumbnails']['medium']['url'] ??
                                   $item['snippet']['thumbnails']['default']['url'] ?? '',
                    'comment' => $randomComment, // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                ];
            } else {
                $response['success'] = false;
                $response['message'] = 'Video liked and commented, but could not retrieve video information.';
                http_response_code(404); // Not Found for video info
            }

            break;

        case 'deleteVideoCard': // –ù–æ–≤—ã–π —ç–∫—à–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
            if (!$videoId) {
                $response['message'] = 'Video ID is missing for delete operation.';
                http_response_code(400);
                break;
            }

            $commentIdToDelete = $input['commentId'] ?? null; // –ü–æ–ª—É—á–∞–µ–º commentId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

            // 1. –û—Ç–º–µ–Ω–∞ –ª–∞–π–∫–∞ –≤–∏–¥–µ–æ (unrate)
            try {
                $youtubeService->videos->rate($videoId, 'none'); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ 'none'
                $response['message'] = 'Video unliked successfully.';
            } catch (Google_Service_Exception $e) {
                // –ï—Å–ª–∏ –≤–∏–¥–µ–æ —É–∂–µ –Ω–µ –ª–∞–π–∫–Ω—É—Ç–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ API, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                error_log("WARNING: Failed to unrate video ID " . $videoId . ": " . $e->getMessage());
                $response['message'] = 'Could not unrate video (may already be unrated).';
            }

            // 2. –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–µ—Å–ª–∏ commentId –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)
            if ($commentIdToDelete) {
                try {
                    // –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ comments->delete
                    $youtubeService->comments->delete($commentIdToDelete);
                    $response['message'] .= ' Comment deleted successfully.';
                } catch (Google_Service_Exception $e) {
                    error_log("WARNING: Failed to delete comment ID " . $commentIdToDelete . ": " . $e->getMessage());
                    $response['message'] .= ' Could not delete comment (may already be deleted or permission denied).';
                }
            } else {
                $response['message'] .= ' No comment ID provided for deletion.';
            }

            $response['success'] = true; // –°—á–∏—Ç–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–π, –¥–∞–∂–µ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –Ω–æ –Ω–µ –±—ã–ª–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            http_response_code(200); // OK
            break;

        case 'getVideoInfo': // –û—Ç–¥–µ–ª—å–Ω—ã–π action –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–µ–∑ –ª–∞–π–∫–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            if (!$videoId) {
                $response['message'] = 'Video ID is missing for getting video info.';
                http_response_code(400);
                break;
            }
            $videoInfo = $youtubeService->videos->listVideos('snippet,contentDetails', ['id' => $videoId]);
            if (!empty($videoInfo['items'])) {
                $item = $videoInfo['items'][0];
                $response['success'] = true;
                $response['message'] = 'Video information retrieved successfully.';
                $response['videoData'] = [
                    'id' => $videoId,
                    'title' => $item['snippet']['title'],
                    'thumbnail' => $item['snippet']['thumbnails']['maxres']['url'] ??
                                   $item['snippet']['thumbnails']['standard']['url'] ??
                                   $item['snippet']['thumbnails']['high']['url'] ??
                                   $item['snippet']['thumbnails']['medium']['url'] ??
                                   $item['snippet']['thumbnails']['default']['url'] ?? '',
                ];
            } else {
                $response['message'] = 'Video not found with the provided ID.';
                http_response_code(404);
            }
            break;

        default:
            $response['message'] = 'Unknown action specified.';
            http_response_code(400); // Bad Request
            break;
    }
} catch (Google_Service_Exception $e) {
    $errorMessage = 'YouTube API Error: ' . $e->getMessage();
    error_log("ERROR: " . $errorMessage . " (Code: " . $e->getCode() . ")");
    $response['message'] = $errorMessage;
    $response['code'] = $e->getCode();
    http_response_code(500); // Internal Server Error
} catch (Exception $e) {
    $errorMessage = 'Server Error: ' . $e->getMessage();
    error_log("ERROR: " . $errorMessage);
    $response['message'] = $errorMessage;
    http_response_code(500); // Internal Server Error
}

// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Å–µ—Å—Å–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π JSON-–æ—Ç–≤–µ—Ç–∞
session_write_close();
echo json_encode($response);
exit();

?>